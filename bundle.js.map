{"version":3,"sources":["index.js"],"names":[],"mappings":";;;;;;AAAA;;AAEA;AACA,IAAM,QAAQ,4BAAd,C,CAA2C;;AAE3C,IAAI,cAAc,SAAd,WAAc,GAAW;AACzB,QAAI,IAAI,4BAAR;;AAEA,QAAG,IAAH,EAAS;AACL,YAAI,KAAI,qBAAR;AACA,gBAAQ,GAAR,CAAY,EAAZ;AACH;;AAED,YAAQ,GAAR,CAAY,CAAZ;AACH,CATD;;AAWA;;AAEA;AACA,IAAI,eAAe,CAAC,YAAD,EAAe,mBAAf,CAAnB;;AAEA,IAAI,SAAS,MAAT,EAAiB,UAAjB,EAA6B,UAA7B,SAA4C,YAA5C,CAAJ;;AAEA,QAAQ,GAAR,CAAY,KAAZ;;AAEA;;AAEA,IAAI,WAAW,EAAE,GAAG,KAAL,EAAY,GAAG,KAAf,EAAf;;AAEA,QAAQ,GAAR,CAAY,SAAS,CAArB;;AAGA,IAAM,SAAS,QAAf;AACA,IAAM,QAAQ,gBAAd;AACA,IAAM,OAAO,OAAb;;AAEA,IAAM,YAAY,EAAC,cAAD,EAAS,YAAT,EAAgB,UAAhB,EAAlB;;AAEA,QAAQ,GAAR,CAAY,SAAZ;AACA,QAAQ,GAAR,CAAY,UAAU,IAAtB;;AAEA;AACA;AACA,IAAM,SAAS,SAAT,MAAS,GAAW;AACtB,UAAM,aAAN;AACH,CAFD;;AAIA;;AAEA;AACA,IAAM,SAAQ,SAAR,MAAQ,GAAI;AACd,UAAM,sCAAN;AACH,CAFD;;AAIA;;AAEA;AACA,IAAM,gBAAe,SAAf,aAAe,CAAC,IAAD,EAAO,IAAP,EAAc;AAC/B,UAAM,OAAO,IAAb;AACH,CAFD;;AAIA,cAAc,WAAd,EAA2B,sBAA3B;;AAGA;AACA;AACA,IAAI,aAAa,sBAAsB,cAAtB,GAAuC,eAAvC,GAAyD,kBAAzD,GAA8E,wCAA9E,GAAyH,yBAAzH,GAAqJ,qCAAtK;;AAGA;AACA,IAAI,SAAS,QAAb;;AAEA,IAAI,oCACe,MADf,4HAAJ;;AAOA,QAAQ,GAAR,CAAY,SAAZ;;AAEA;AACA,IAAI,qBAAoB,SAApB,kBAAoB,CAAC,MAAD,EAAU;AAC9B,+DAC2C,MAD3C;AAGH,CAJD;;AAMA,QAAQ,GAAR,CAAY,mBAAmB,MAAnB,CAAZ;;AAEA;;IACM,U;AACF,wBAAY,IAAZ,EAAkB,SAAlB,EAA6B,QAA7B,EAAsC;AAAA;;AAClC,aAAK,IAAL,GAAY,IAAZ;AACA,aAAK,SAAL,GAAiB,SAAjB;AACA,aAAK,QAAL,GAAgB,QAAhB;AACH;;;;oCACW;AACR,oBAAQ,GAAR,CAAY,SAAZ,EAAuB,KAAK,IAA5B;AACH;;;yCACe;AACZ,oBAAQ,GAAR,CAAY,cAAZ,EAA4B,KAAK,SAAjC;AACH;;;wCACc;AACX,oBAAQ,GAAR,CAAY,aAAZ,EAA2B,KAAK,QAAhC;AACH;;;;;;AAGL,IAAM,QAAQ,IAAI,UAAJ,CAAe,OAAf,EAAwB,UAAxB,EAAoC,OAApC,CAAd;;AAEA,MAAM,SAAN;AACA,MAAM,cAAN;AACA,MAAM,aAAN","file":"bundle.js","sourcesContent":["//CONST, VAR, LET\n\n//var motto = \"I'm awesome but mutable.\";\nconst motto = \"I'm awesome and immutable!\";//this won't change. But how do we know if we don't want to change the value ever?\n\nvar ourFunction = function() {\n    let x = \"this is in the outer scope\";\n\n    if(true) {\n        let x = \"this is a new value\";\n        console.log(x);\n    }\n\n    console.log(x);\n}\n\nourFunction();\n\n//SPREAD OPERATORS\nlet awesomeBands = [\"Jack White\", \"Smashing Pumpkins\"]\n\nlet bands = [\"Tool\", \"Medicine\", \"Morphine\", ...awesomeBands];\n\nconsole.log(bands);\n\n//OBJECT SHORTHAND CREATION\n\nlet myObject = { x: \"cat\", y: \"dog\"};\n\nconsole.log(myObject.x);\n\n\nconst engine = \"Vroom!\";\nconst wheel = \"ssssssshhhhhhh\";\nconst horn = \"Honk!\";\n\nconst carSounds = {engine, wheel, horn};\n\nconsole.log(carSounds);\nconsole.log(carSounds.horn);\n\n//FAT ARROWS (na na na gonna have a good time)\n//old standard way\nconst oldway = function (){\n    alert(\"hello world\");\n}\n\noldway();\n\n//new way fat arrows\nconst newWay =()=>{\n    alert(\"Hello World. Gonna have a good time!\");\n}\n\nnewWay();\n\n//fat arrow with arguments\nconst newWayWithArg =(arg1, arg2)=>{\n    alert(arg1 + arg2);\n}\n\nnewWayWithArg(\"You're a \", \"sly one, Mr. Grinch.\");\n\n\n//TEMPLATE LITERALS\n//old way concat\nvar shadysBack = \"Guess who's back?\" + \" back again.\" + \" Shady's back\" + \", tell a friend.\" + \"So the FCC won't let me be so they try\" + \" to shut me down on MTV\" + \", but it feels so empty without me.\";\n\n\n//new way with variable and template literal\nlet topic1 = \"NASCAR\";\n\nvar PolRelHer = `\nLet's talk about ${topic1},\nOld Hollywood movie stars,\nLet's talk about anything,\nanything in this world...\ncept politics, religion, and her.`;\n\nconsole.log(PolRelHer);\n\n//even with a function\nlet longStringFunction =(topic1)=>{\n    return  `\n    Richard Petty was the greatest driver in ${topic1} history.\n    `;\n}\n\nconsole.log(longStringFunction(topic1));\n\n//CLASSES\nclass Girlfriend {\n    constructor(name, stability, attitude){\n        this.name = name;\n        this.stability = stability;\n        this.attitude = attitude;\n    }\n    printName() {\n        console.log(\"name = \", this.name);\n    }   \n    printStability(){\n        console.log(\"stability = \", this.stability);\n    }\n    printAttitude(){\n        console.log(\"attitude = \", this.attitude);\n    }\n}\n\nconst Angie = new Girlfriend(\"Angie\", \"unstable\", \"bitch\");\n\nAngie.printName();\nAngie.printStability();\nAngie.printAttitude();"]}